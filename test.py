from pydantic import BaseModel
from typing import Dict, List, Any, Optional

class Node(BaseModel):
    id: str
    type: str
    data: Optional[Dict[str, Any]] = None  # Allow any key-value pair in data
    value: Optional[Any] = None  # Can be a number, string, or None

class Edge(BaseModel):
    source: str
    target: str

class FlowRequest(BaseModel):
    nodes: List[Node]
    edges: List[Edge]

nodes=[Node(id='1', type='inputNode', data={'label': 'Input[object Object],[object Object],[object Object]', 'func': 'input', 'value': 5, 'functionDict': {'add': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['sum']}, 'sub': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'multiply': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'load_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image_path'], 'outputNames': ['image']}, 'resize_image': {'inputs': 2, 'outputs': 1, 'inputNames': ['image', 'dimension_of_image'], 'outputNames': ['resized_image']}, 'convert_to_color_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['color_image']}, 'convert_to_grayscale_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['gray_image']}, 'get_contour_centroid': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['center']}, 'threshold_image': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'lower_th', 'upper_th'], 'outputNames': ['thresholded_image']}, 'find_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'retrival_mode', 'approximation_method'], 'outputNames': ['contours_serializable']}, 'get_contour_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['area']}, 'get_max_area': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'get_average_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['average_area']}, 'get_largest_contour': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['second_largest_contour']}, 'process_contours': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'draw_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'contour_data', 'color_to_draw'], 'outputNames': ['contour_image']}}, 'output': 5}, value=5), Node(id='2', type='functionNode', data={'label': 'Add', 'func': 'add', 'value': 10, 'functionDict': {'add': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['sum']}, 'sub': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'multiply': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'load_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image_path'], 'outputNames': ['image']}, 'resize_image': {'inputs': 2, 'outputs': 1, 'inputNames': ['image', 'dimension_of_image'], 'outputNames': ['resized_image']}, 'convert_to_color_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['color_image']}, 'convert_to_grayscale_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['gray_image']}, 'get_contour_centroid': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['center']}, 'threshold_image': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'lower_th', 'upper_th'], 'outputNames': ['thresholded_image']}, 'find_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'retrival_mode', 'approximation_method'], 'outputNames': ['contours_serializable']}, 'get_contour_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['area']}, 'get_max_area': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'get_average_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['average_area']}, 'get_largest_contour': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['second_largest_contour']}, 'process_contours': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'draw_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'contour_data', 'color_to_draw'], 'outputNames': ['contour_image']}}, 'output': 10}, value=10), Node(id='3', type='resultNode', data={'label': 'Result', 'func': 'result', 'value': 10, 'functionDict': {'add': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['sum']}, 'sub': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'multiply': {'inputs': 2, 'outputs': 1, 'inputNames': ['a', 'b'], 'outputNames': ['subtract']}, 'load_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image_path'], 'outputNames': ['image']}, 'resize_image': {'inputs': 2, 'outputs': 1, 'inputNames': ['image', 'dimension_of_image'], 'outputNames': ['resized_image']}, 'convert_to_color_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['color_image']}, 'convert_to_grayscale_image': {'inputs': 1, 'outputs': 1, 'inputNames': ['image'], 'outputNames': ['gray_image']}, 'get_contour_centroid': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['center']}, 'threshold_image': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'lower_th', 'upper_th'], 'outputNames': ['thresholded_image']}, 'find_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'retrival_mode', 'approximation_method'], 'outputNames': ['contours_serializable']}, 'get_contour_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contour'], 'outputNames': ['area']}, 'get_max_area': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'get_average_area': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['average_area']}, 'get_largest_contour': {'inputs': 1, 'outputs': 1, 'inputNames': ['contours'], 'outputNames': ['second_largest_contour']}, 'process_contours': {'inputs': 1, 'outputs': 0, 'inputNames': ['contours'], 'outputNames': []}, 'draw_contours': {'inputs': 3, 'outputs': 1, 'inputNames': ['image', 'contour_data', 'color_to_draw'], 'outputNames': ['contour_image']}}, 'output': 10}, value=10)]
edges=[Edge(source='1', target='2'), Edge(source='2', target='3'), Edge(source='1', target='2')]